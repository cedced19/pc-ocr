#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pc-ocr:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = require('env-port')('8884');

var config = require('../config.json');
var address = 'http' + (config.https?'s':'') + '://' + (config.address || require('internal-ip').v4()) + ':' + port;

app.set('port', port);
app.set('address', address);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Attache socket.io to HTTP server.
 */
var io = require('socket.io')(server);
io.on('connection', require('../sockets/index')(io));

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log(require('server-welcome')(port, 'PCâˆ’OCR'));


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
